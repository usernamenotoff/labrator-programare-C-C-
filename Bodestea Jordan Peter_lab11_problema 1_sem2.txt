/* Bodestean Jordan
În cazul exemplului 3 (care exemplifică moştenirea simplă, cu clasa de bază Pozitie şi derivată Punct) se cer următoarele:
a. urmariţi şi verificaţi ordinea de apel pentru constructori/destructori
b. extindeţi funcţia main( ) pentru a utiliza toate metodele din clasa de baza şi din clasa derivată
c. introduceţi o nouă clasă Cerc (date şi metode), derivată din clasa Pozitie
d. scrieţi un program ce utilizează aceste clase.*/


#include <iostream>
using namespace std;
// clasa de baza
class Pozitie {
protected:
	int x, y;
public:
	Pozitie(int = 0, int = 0);
	Pozitie(const Pozitie&);//exista unul implicit standard, aici unul diferit
	~Pozitie();
	//void afisare();
	//void deplasare(int, int);
	virtual void afisare();
	virtual void deplasare(int, int);
};//CB
// constructor
Pozitie::Pozitie(int abs, int ord) {
	x = abs; y = ord;
	cout << "Constructor CB \"Pozitie\", ";
	afisare();
}
//constructor de copiere
Pozitie::Pozitie(const Pozitie& p) {
	x = p.x;
	y = p.y;
	cout << "Constructor de copiere CB \"Pozitie\", ";
	afisare();
}
// destructor
Pozitie::~Pozitie() {
	cout << "Destructor CB \"Pozitie \", ";
	afisare();
}
void Pozitie::afisare() {
	cout << " CB afisare: coordonate: x = " << x << ", y = " << y << "\n";
}
void Pozitie::deplasare(int dx, int dy) {
	cout << "CB: deplasare" << endl;
	x += dx; y += dy;
}
// clasa derivata
class Punct : public Pozitie {
	int vizibil;//ca un flag
	char culoare;
public:
	Punct(int = 0, int = 0, char = 'A');
	Punct(const Punct&);
	~Punct();
	void arata() {
		vizibil = 1;
	}
	void ascunde() {
		vizibil = 0;
	}
	void coloreaza(char c) {
		culoare = c;
	}
	void deplasare(int, int) override;
	void afisare() override;
};//CD
// constructor
Punct::Punct(int abs, int ord, char c) :Pozitie(abs, ord) {
	vizibil = 0;
	culoare = c;
	cout << "Constructor CD \"Punct\", ";
	afisare();//CD
}
// constructor de copiere
Punct::Punct(const Punct& p) :Pozitie(p.x, p.y) {
	vizibil = p.vizibil;
	culoare = p.culoare;
	cout << "Constructor de copiere CD \"Punct\", ";
	afisare();//CD
}
// destructor
Punct::~Punct() {
	cout << "Destructor CD \"Punct\", ";
	afisare();//CD
}
// redefinire functie de deplasare in clasa derivata
void Punct::deplasare(int dx, int dy) {
	if (vizibil) {
		cout << " CD: Deplasare afisare CD\n";
		x += dx;
		y += dy;
		afisare();//CD
	}
	else {
		x += dx;
		y += dy;
		cout << "Deplasare prin CD afisare din CB\n";
		Pozitie::afisare();
	}
}
// redefinire metoda de afisare in clasa derivata
void Punct::afisare() {
	cout << "Pozitie: x = " << x << ", y = " << y;
	cout << ", culoare: " << culoare;
	if (vizibil) cout << ", vizibil \n";
	else cout << ", invizibil \n";
}

class Cerc :public Pozitie {
	int cadran;
	int x1;
	int y1;
public: Cerc(int = 5, int = 3);
	  Cerc(const Cerc&);
	  ~Cerc();
	  
	  void afisare()override;
	  void deplasare(int,int)override;
};
//constructor
Cerc::Cerc(int abs, int ord) :Pozitie(abs, ord) {
	abs = x;
	ord = y;
	afisare();
}
Cerc::~Cerc() {
	cout << "Destructor CB \"Cerc\", ";
	afisare();
}
//constructor copiere
Cerc::Cerc(const Cerc& p):Pozitie(p.x, p.y) {
	x1 = p.x;
		y1 = p.y;
}

void Cerc::deplasare(int xx, int yy) {
	cout << " CD: Deplasare afisare CD\n";
	x += xx;
	y += yy;
	afisare();//CD
	Pozitie::afisare();
};

void Cerc::afisare() {
	cout << "Pozitie: x = " << x << ", y = " << y;
	if (x > 0 && y > 0) cadran = 1;
	if (x < 0 && y < 0) cadran = 3;
	if (x > 0 && y < 0) cadran = 4;
	if (x < 0 && y > 0) cadran = 2;
	cout << " cadran: " << cadran << endl;
}

int main() {
	Pozitie pp0(7, 7);//base class object
	cout << "\n Metode CB \n";
	pp0.afisare();
	pp0.deplasare(6, 9);
	pp0.afisare();
	cout << "\n Metode CD \n";
	
	Punct p0(1, 1, 'v');//derived class object
	p0.afisare();
	Punct p1(p0);
	p1.arata();
	p1.deplasare(10, 10);
	cout << "introduceti o culoare";
	char cu;
	cin >> cu;
	p1.coloreaza(cu);//Am adaugat metoda coloreaza
	cout << "\nUpcasting - obiecte:\n";
	pp0 = p0;//upcasting by objects
	pp0.afisare();
	cout << "\nUpcasting - pointeri:\n ";

	Cerc p2(-4,5);
	p2.afisare();
	Cerc c1(p2);
	c1.afisare();
	c1.deplasare(-4, 4);
	c1.afisare();

	Pozitie* p;//base class pointer
	p = new Punct(100, 100, 'Z');//derived object to the base class pointer
	//cout<<"\nAfisare CB: \n"; non virtual
	cout << "\nAfisare CD: derived class object if virtual, else base class CB \n";
	p->afisare();//afis invizibil
	p = &pp0;
	cout << "\nAfisare CB: base class object always\n";
	p->afisare();
	p = &p1;
	cout << "\nAfisare CD: derived class object if virtual, else base class CB \n";
	p->afisare();
	Punct* pp;
	pp = &p1;
	cout << "\nAfisare CD: derived class object always\n";
	pp->afisare();
	cout << "\n Deplasare CD with 10, 10 \n";
	pp->deplasare(10, 10);
	cout << "\nAfisare CD: derived class object with ascunde()\n";
	pp->ascunde();
	pp->afisare();
	cout << "\n Deplasare CD with 10, 10 and ascunde()\n";
	pp->deplasare(10, 10);
	cout << "\nAfisare direct from CB: derived object displayed with base class method always\n";
	pp->Pozitie::afisare();
	cout << "\nDowncasting:\n ";
	Punct* pdown;//derived pointer
	pdown = (Punct*)&pp0;//downcasting by base class object
	cout << "\nAfisare CB: base class object using a derived pointer, else derived class CD \n";
	pdown->afisare();
	pdown = (Punct*)p;//downcasting by derived class object
	cout << "\n Afisare din Derivat, Punct" << endl;
	pdown->afisare();
	Cerc* c;

	c = &p2;
	cout << "\nAfisare CD:derived class object with always()\n";
	c->afisare();
	c = &c1;
	cout << "deplasare with -2,4\n";
	c->deplasare(-2,4);
	cout << "afisare cadran\n";
	c->afisare();

	
	return 0;
}