/*Bodestean Jordan
Supraîncărcaţi operatorii de extracţie şi de inserţie pentru clasa Complex, în care părţile reale
şi imaginare sunt ambele protected de tip real. Derivaţi public o clasă Punct din clasa
Complex, adăugând atributul culoare pentru punctul de coordonate x şi y corespunzător părții
reale, respectiv imaginare a numărului complex. Supraîncărcaţi din nou aceiași operatori de
intrare-ieșire. Instantiati obiecte de tip Complex si Punct si verificati functionalitatea
supraincarcarii operatorilor. Asignati un obiect de tip Punct la unul de tip Complex prin
upcasting si afisati atributele lui*/



#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string.h>
#include <math.h>
#include<iomanip>
using namespace std;

class Complex {
protected: float x, y;
public:
	Complex(int x, int y) { this->x = x; this->y = y; }
		 friend istream& operator>>(istream&, Complex& obj);
		 friend ostream& operator<<(ostream&, Complex obj);
		
		 


};


istream& operator>> (istream& stream, Complex& obj) {
	cout << "introduceti valorile:";
	stream >> obj.x;
	cout << "";
	stream >> obj.y;
	cout<< endl;
	return stream;
}
ostream& operator<<(ostream& stream, Complex obj) {
	cout << "Introduceti coordonatele: ";
	stream << obj.x;
	cout << " ";
	stream << obj.y;
	cout << endl;
	return stream;
}

class Punct:public Complex {

       char culoare;
	   float re, im;
public:
	Punct(float re, float im, const char culoare);
	friend istream& operator>>(istream&, Punct& obj);
	friend ostream& operator<<(ostream&, Punct obj);


	
};
Punct::Punct(float re, float im,  const char culoare):Complex(re, im){
	this->culoare = culoare;
}

ostream& operator<<(ostream& stream, Punct obj) {
	cout << "Introduceti coordonatele: ";
	stream << obj.x <<" ";
	stream << obj.y << " ";
	stream << obj.culoare << endl;
	return stream;
}
istream& operator>>(istream& stream, Punct& obj) {
	cout << "introduceti valorile:";
	stream >> obj.x;
	stream >> obj.y;
	stream >> obj.culoare;
	return stream;
}




int main() {

	Complex ob1(3, 5);
	cout << ob1;
	Punct ob2(4,5, 'm');
	cout << ob2;
	//upcasting//
	ob1 = ob2;
	cout << ob1;
	return 0;
}
