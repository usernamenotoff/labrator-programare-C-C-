//Folosiţi funcţiile de bibliotecă pentru sortări (qsort( )) pentru a aranja un tablou unidimensional de înregistrări
cu nume, prenume, cod numeric personal, data angajării după două câmpuri la alegere (un exemplu ar fi:
crescător după nume şi descrescător după data angajării).//




#include <iostream>
using namespace std;

struct data_angajarii {
	int luna;
	int zii;
	int an;
};

struct Pers {
	char nume[25];
	char prenume[25];

	int cod_numeric;
	struct data_angajarii data;
};
	
	void citDatePers(Pers p[], int n) {
		int i;
		for (i = 0; i < n; i++) {
			cout << "\nNumele: ";
			cin >> p[i].nume;
			cout << "\nPrenumele: ";
			cin >> p[i].prenume;
			cout << "\n Cod: ";
			cin >> p[i].cod_numeric;
			cout << "\nData angajarii";
			cout << "\nzii:";
			cin >> (p[i].data).zii;
			cout << "\nluna:";
			cin >> (p[i].data).luna;
			cout << "\nan:";
			cin >> (p[i].data).an;

		}
	}
void afisDatePers( Pers p[], int n) {
	int i;
	for (i = 0; i < n; i++) {
		if ((p[i].data).zii <= 31 && (p[i].data).luna <= 12 && (p[i].data).an >= 1900) {
			cout << "\n Numele: " << p[i].nume;
			cout << "\n Prenumele: " << p[i].prenume;
			cout << "\n Cod: " << p[i].cod_numeric;
			cout << "\n Data anagajarii: ";
			cout << "\n\t ziua: " << (p[i].data).zii;
			cout << "\n\t ziua: " << (p[i].data).luna;
			cout << "\n\t ziua: " << (p[i].data).an;
		}
		else {
			cout << "introdu data potrivita";
		 break;
		}
	}
}
int cmp(const void* a, const void* b);



int main() {
	int n;
	struct Pers c[25];

	cout << "introduceti nr de persoane";
	cin >> n;
	cout << endl;
	int i;

	citDatePers(c, n);
	cout << endl;
	afisDatePers(c, n);
	qsort(c, n, sizeof(c[0]), cmp);
	cout << endl;
	afisDatePers(c, n);

}
int cmp(const void* a, const void* b);
	

int cmp(const void* aa, const void* bb)
{
	Pers* a = (Pers*)aa;
	Pers* b = (Pers*)bb;
	if ((a->data).an > (b->data).an) return 1;
	else
		if ((a->data).an < (b->data.an)) return -1;
		else {
			if ((a->data).luna > (b->data).luna) return 1;
			else if ((a->data).luna < (b->data).luna) return -1;
			else {
				if ((a->data).zii > (b->data).zii)
					return 1;
				else if ((a->data).zii < (b->data).zii)
					return -1;
				else
					if ((strcmp(a->nume, b->nume) > 0)) return 1;
					else if ((strcmp(a->nume, b->nume) < 0)) return -1;
				return 0;
			}
		}
}